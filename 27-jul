function romanize(num) {
  var lookup = {M:1000,CM:900,D:500,CD:400,C:100,XC:90,L:50,XL:40,X:10,IX:9,V:5,IV:4,I:1},roman = '',i;
  for ( i in lookup ) {
    while ( num >= lookup[i] ) {
      roman += i;
      num -= lookup[i];
    }
  }
  return roman;
}

Write a function in romanNumerals.js that converts an integer (<= 1,000) to its Roman numeral equivalent.

For reference, these are the building blocks for how we encode numbers with Roman numerals:

Decimal

Roman

1

I

5

V

10

X

50

L

100

C

500

D

1,000

M

For example:

toRoman(5)
'V'

toRoman(267)
'CCLXVII'
Important: You should convert to “old-school Roman numerals”, where subtraction isn’t used. So, for exmple, 4 is “IIII” and 9 is “VIIII”. You may be more used to a different style, where subtraction is used, as 4 would be “IV” and 9 would be “IX”. This is not what we want here (though it’s a good, but much harder challenge).

For example:

toRoman(99)
'LXXXXVIIII'

solution:
const toRoman = number => {
    let result = ''
    let num = Math.floor(number)
    while(num > 0){
      if (num >= 1000){
      result += 'M'
      num -= 1000
    } else if (num >= 500){
      result += 'D'
      num -= 500
    } else if (num >= 100){
      result += 'C'
      num -= 100
    } else if (num >= 50){
      result += 'L'
      num -= 50
    } else if (num >= 10){
      result += 'X'
      num -= 10
    } else if (num >= 5){
      result += 'V'
      num -= 5
    } else if (num >= 1){
      result += 'I'
      num -= 1
    } 
  } return result
  }
  
  console.log(toRoman(130))
  console.log(toRoman(234))
  console.log(toRoman(8999.6))